{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from scipy import stats\n",
    "import seaborn as sns\n",
    "import numpy as np \n",
    "import matplotlib.pyplot as plt \n",
    "import statsmodels.formula.api as smf\n",
    "import sklearn as sk\n",
    "%matplotlib inline\n",
    "sns.set()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('kc_house_data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 21597 entries, 0 to 21596\n",
      "Data columns (total 21 columns):\n",
      "id               21597 non-null int64\n",
      "date             21597 non-null object\n",
      "price            21597 non-null float64\n",
      "bedrooms         21597 non-null int64\n",
      "bathrooms        21597 non-null float64\n",
      "sqft_living      21597 non-null int64\n",
      "sqft_lot         21597 non-null int64\n",
      "floors           21597 non-null float64\n",
      "waterfront       19221 non-null float64\n",
      "view             21534 non-null float64\n",
      "condition        21597 non-null int64\n",
      "grade            21597 non-null int64\n",
      "sqft_above       21597 non-null int64\n",
      "sqft_basement    21597 non-null object\n",
      "yr_built         21597 non-null int64\n",
      "yr_renovated     17755 non-null float64\n",
      "zipcode          21597 non-null int64\n",
      "lat              21597 non-null float64\n",
      "long             21597 non-null float64\n",
      "sqft_living15    21597 non-null int64\n",
      "sqft_lot15       21597 non-null int64\n",
      "dtypes: float64(8), int64(11), object(2)\n",
      "memory usage: 3.5+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [],
   "source": [
    "# I want to create a function that take null values from a list of columsnand conver them to 0\n",
    "def na_to_zeros(df,list_of_columns):\n",
    "    df[list_of_columns] = df[list_of_columns].fillna(0.0)\n",
    "    return df[list_of_columns]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>waterfront</th>\n",
       "      <th>view</th>\n",
       "      <th>yr_renovated</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1991.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21567</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21568</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21569</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21570</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21571</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21572</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21573</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21574</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21575</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21576</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21577</th>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21578</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21579</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21580</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21581</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21582</th>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21583</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21584</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21585</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21586</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21587</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21588</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21589</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21590</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21591</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21592</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21593</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21594</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21595</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21596</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>21597 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       waterfront  view  yr_renovated\n",
       "0             0.0   0.0           0.0\n",
       "1             0.0   0.0        1991.0\n",
       "2             0.0   0.0           0.0\n",
       "3             0.0   0.0           0.0\n",
       "4             0.0   0.0           0.0\n",
       "5             0.0   0.0           0.0\n",
       "6             0.0   0.0           0.0\n",
       "7             0.0   0.0           0.0\n",
       "8             0.0   0.0           0.0\n",
       "9             0.0   0.0           0.0\n",
       "10            0.0   0.0           0.0\n",
       "11            0.0   0.0           0.0\n",
       "12            0.0   0.0           0.0\n",
       "13            0.0   0.0           0.0\n",
       "14            0.0   0.0           0.0\n",
       "15            0.0   3.0           0.0\n",
       "16            0.0   0.0           0.0\n",
       "17            0.0   0.0           0.0\n",
       "18            0.0   0.0           0.0\n",
       "19            0.0   0.0           0.0\n",
       "20            0.0   0.0           0.0\n",
       "21            0.0   4.0           0.0\n",
       "22            0.0   0.0           0.0\n",
       "23            0.0   0.0           0.0\n",
       "24            0.0   0.0           0.0\n",
       "25            0.0   0.0           0.0\n",
       "26            0.0   0.0           0.0\n",
       "27            0.0   0.0           0.0\n",
       "28            0.0   0.0           0.0\n",
       "29            0.0   0.0           0.0\n",
       "...           ...   ...           ...\n",
       "21567         0.0   0.0           0.0\n",
       "21568         0.0   0.0           0.0\n",
       "21569         0.0   0.0           0.0\n",
       "21570         0.0   0.0           0.0\n",
       "21571         0.0   0.0           0.0\n",
       "21572         0.0   0.0           0.0\n",
       "21573         0.0   0.0           0.0\n",
       "21574         0.0   0.0           0.0\n",
       "21575         0.0   0.0           0.0\n",
       "21576         0.0   0.0           0.0\n",
       "21577         0.0   2.0           0.0\n",
       "21578         0.0   0.0           0.0\n",
       "21579         0.0   0.0           0.0\n",
       "21580         0.0   0.0           0.0\n",
       "21581         0.0   0.0           0.0\n",
       "21582         0.0   2.0           0.0\n",
       "21583         0.0   0.0           0.0\n",
       "21584         0.0   0.0           0.0\n",
       "21585         0.0   0.0           0.0\n",
       "21586         0.0   0.0           0.0\n",
       "21587         0.0   0.0           0.0\n",
       "21588         0.0   0.0           0.0\n",
       "21589         0.0   0.0           0.0\n",
       "21590         0.0   0.0           0.0\n",
       "21591         0.0   0.0           0.0\n",
       "21592         0.0   0.0           0.0\n",
       "21593         0.0   0.0           0.0\n",
       "21594         0.0   0.0           0.0\n",
       "21595         0.0   0.0           0.0\n",
       "21596         0.0   0.0           0.0\n",
       "\n",
       "[21597 rows x 3 columns]"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "na_to_zeros(df , ['waterfront','view','yr_renovated'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 21597 entries, 0 to 21596\n",
      "Data columns (total 21 columns):\n",
      "id               21597 non-null int64\n",
      "date             21597 non-null object\n",
      "price            21597 non-null float64\n",
      "bedrooms         21597 non-null int64\n",
      "bathrooms        21597 non-null float64\n",
      "sqft_living      21597 non-null int64\n",
      "sqft_lot         21597 non-null int64\n",
      "floors           21597 non-null float64\n",
      "waterfront       21597 non-null float64\n",
      "view             21597 non-null float64\n",
      "condition        21597 non-null int64\n",
      "grade            21597 non-null int64\n",
      "sqft_above       21597 non-null int64\n",
      "sqft_basement    21597 non-null object\n",
      "yr_built         21597 non-null int64\n",
      "yr_renovated     21597 non-null float64\n",
      "zipcode          21597 non-null int64\n",
      "lat              21597 non-null float64\n",
      "long             21597 non-null float64\n",
      "sqft_living15    21597 non-null int64\n",
      "sqft_lot15       21597 non-null int64\n",
      "dtypes: float64(8), int64(11), object(2)\n",
      "memory usage: 3.5+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id               0\n",
       "date             0\n",
       "price            0\n",
       "bedrooms         0\n",
       "bathrooms        0\n",
       "sqft_living      0\n",
       "sqft_lot         0\n",
       "floors           0\n",
       "waterfront       0\n",
       "view             0\n",
       "condition        0\n",
       "grade            0\n",
       "sqft_above       0\n",
       "sqft_basement    0\n",
       "yr_built         0\n",
       "yr_renovated     0\n",
       "zipcode          0\n",
       "lat              0\n",
       "long             0\n",
       "sqft_living15    0\n",
       "sqft_lot15       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['sqft_basement'] = pd.to_numeric(df['sqft_basement'], errors='coerce')\n",
    "df['sqft_basement'] = df['sqft_basement'].replace(0.0, np.nan)\n",
    "df['sqft_basement'] = df['sqft_basement'].fillna(df['sqft_basement'].median())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "700.0     13488\n",
       "600.0       217\n",
       "500.0       209\n",
       "800.0       201\n",
       "400.0       184\n",
       "1000.0      148\n",
       "300.0       142\n",
       "900.0       142\n",
       "200.0       105\n",
       "750.0       104\n",
       "480.0       103\n",
       "530.0       103\n",
       "450.0       103\n",
       "720.0        98\n",
       "620.0        90\n",
       "580.0        84\n",
       "840.0        83\n",
       "420.0        81\n",
       "860.0        79\n",
       "670.0        78\n",
       "1100.0       78\n",
       "550.0        76\n",
       "780.0        76\n",
       "650.0        75\n",
       "240.0        74\n",
       "380.0        73\n",
       "680.0        73\n",
       "850.0        72\n",
       "360.0        72\n",
       "940.0        71\n",
       "          ...  \n",
       "1008.0        1\n",
       "3480.0        1\n",
       "295.0         1\n",
       "602.0         1\n",
       "274.0         1\n",
       "2850.0        1\n",
       "415.0         1\n",
       "2240.0        1\n",
       "243.0         1\n",
       "143.0         1\n",
       "1525.0        1\n",
       "862.0         1\n",
       "172.0         1\n",
       "225.0         1\n",
       "2180.0        1\n",
       "65.0          1\n",
       "1135.0        1\n",
       "3000.0        1\n",
       "1990.0        1\n",
       "2500.0        1\n",
       "1548.0        1\n",
       "915.0         1\n",
       "518.0         1\n",
       "266.0         1\n",
       "1930.0        1\n",
       "1920.0        1\n",
       "588.0         1\n",
       "1245.0        1\n",
       "2390.0        1\n",
       "935.0         1\n",
       "Name: sqft_basement, Length: 302, dtype: int64"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sqft_basement.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "# take care of outliyers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df[(np.abs(stats.zscore(df.select_dtypes(exclude='object'))) < 3).all(axis=1)]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>price</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>bathrooms</th>\n",
       "      <th>sqft_living</th>\n",
       "      <th>sqft_lot</th>\n",
       "      <th>floors</th>\n",
       "      <th>waterfront</th>\n",
       "      <th>view</th>\n",
       "      <th>condition</th>\n",
       "      <th>grade</th>\n",
       "      <th>sqft_above</th>\n",
       "      <th>sqft_basement</th>\n",
       "      <th>yr_built</th>\n",
       "      <th>yr_renovated</th>\n",
       "      <th>zipcode</th>\n",
       "      <th>lat</th>\n",
       "      <th>long</th>\n",
       "      <th>sqft_living15</th>\n",
       "      <th>sqft_lot15</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.874700e+04</td>\n",
       "      <td>1.874700e+04</td>\n",
       "      <td>18747.000000</td>\n",
       "      <td>18747.000000</td>\n",
       "      <td>18747.000000</td>\n",
       "      <td>18747.000000</td>\n",
       "      <td>18747.000000</td>\n",
       "      <td>18747.0</td>\n",
       "      <td>18747.000000</td>\n",
       "      <td>18747.000000</td>\n",
       "      <td>18747.000000</td>\n",
       "      <td>18747.000000</td>\n",
       "      <td>18747.000000</td>\n",
       "      <td>18747.000000</td>\n",
       "      <td>18747.0</td>\n",
       "      <td>18747.000000</td>\n",
       "      <td>18747.000000</td>\n",
       "      <td>18747.000000</td>\n",
       "      <td>18747.000000</td>\n",
       "      <td>18747.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>4.646504e+09</td>\n",
       "      <td>4.804433e+05</td>\n",
       "      <td>3.318984</td>\n",
       "      <td>2.035766</td>\n",
       "      <td>1943.006561</td>\n",
       "      <td>9778.233104</td>\n",
       "      <td>1.483437</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.090948</td>\n",
       "      <td>3.420014</td>\n",
       "      <td>7.531232</td>\n",
       "      <td>1693.682829</td>\n",
       "      <td>687.185576</td>\n",
       "      <td>1971.573798</td>\n",
       "      <td>0.0</td>\n",
       "      <td>98078.586387</td>\n",
       "      <td>47.560477</td>\n",
       "      <td>-122.221138</td>\n",
       "      <td>1906.591615</td>\n",
       "      <td>9033.366832</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2.864917e+09</td>\n",
       "      <td>2.311212e+05</td>\n",
       "      <td>0.845800</td>\n",
       "      <td>0.687184</td>\n",
       "      <td>733.031630</td>\n",
       "      <td>11348.095953</td>\n",
       "      <td>0.540285</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.399505</td>\n",
       "      <td>0.646652</td>\n",
       "      <td>1.023319</td>\n",
       "      <td>708.705790</td>\n",
       "      <td>195.009374</td>\n",
       "      <td>29.120990</td>\n",
       "      <td>0.0</td>\n",
       "      <td>53.300019</td>\n",
       "      <td>0.140243</td>\n",
       "      <td>0.128707</td>\n",
       "      <td>596.852586</td>\n",
       "      <td>8914.549757</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000102e+06</td>\n",
       "      <td>8.200000e+04</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>370.000000</td>\n",
       "      <td>520.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>370.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>1900.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>98001.000000</td>\n",
       "      <td>47.176400</td>\n",
       "      <td>-122.502000</td>\n",
       "      <td>460.000000</td>\n",
       "      <td>651.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.207050e+09</td>\n",
       "      <td>3.114000e+05</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>1390.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>1170.000000</td>\n",
       "      <td>700.000000</td>\n",
       "      <td>1952.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>98033.000000</td>\n",
       "      <td>47.467700</td>\n",
       "      <td>-122.330000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>4.006000e+09</td>\n",
       "      <td>4.310000e+05</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1830.000000</td>\n",
       "      <td>7350.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>1500.000000</td>\n",
       "      <td>700.000000</td>\n",
       "      <td>1975.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>98070.000000</td>\n",
       "      <td>47.571900</td>\n",
       "      <td>-122.237000</td>\n",
       "      <td>1790.000000</td>\n",
       "      <td>7425.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>7.360650e+09</td>\n",
       "      <td>5.985000e+05</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.500000</td>\n",
       "      <td>2400.000000</td>\n",
       "      <td>9861.500000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>2100.000000</td>\n",
       "      <td>700.000000</td>\n",
       "      <td>1997.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>98118.000000</td>\n",
       "      <td>47.681100</td>\n",
       "      <td>-122.134000</td>\n",
       "      <td>2260.000000</td>\n",
       "      <td>9593.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>9.900000e+09</td>\n",
       "      <td>1.640000e+06</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>4.250000</td>\n",
       "      <td>4750.000000</td>\n",
       "      <td>137214.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>4270.000000</td>\n",
       "      <td>1470.000000</td>\n",
       "      <td>2015.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>98199.000000</td>\n",
       "      <td>47.777600</td>\n",
       "      <td>-121.797000</td>\n",
       "      <td>4040.000000</td>\n",
       "      <td>93825.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 id         price      bedrooms     bathrooms   sqft_living  \\\n",
       "count  1.874700e+04  1.874700e+04  18747.000000  18747.000000  18747.000000   \n",
       "mean   4.646504e+09  4.804433e+05      3.318984      2.035766   1943.006561   \n",
       "std    2.864917e+09  2.311212e+05      0.845800      0.687184    733.031630   \n",
       "min    1.000102e+06  8.200000e+04      1.000000      0.500000    370.000000   \n",
       "25%    2.207050e+09  3.114000e+05      3.000000      1.500000   1390.000000   \n",
       "50%    4.006000e+09  4.310000e+05      3.000000      2.000000   1830.000000   \n",
       "75%    7.360650e+09  5.985000e+05      4.000000      2.500000   2400.000000   \n",
       "max    9.900000e+09  1.640000e+06      6.000000      4.250000   4750.000000   \n",
       "\n",
       "            sqft_lot        floors  waterfront          view     condition  \\\n",
       "count   18747.000000  18747.000000     18747.0  18747.000000  18747.000000   \n",
       "mean     9778.233104      1.483437         0.0      0.090948      3.420014   \n",
       "std     11348.095953      0.540285         0.0      0.399505      0.646652   \n",
       "min       520.000000      1.000000         0.0      0.000000      2.000000   \n",
       "25%      5000.000000      1.000000         0.0      0.000000      3.000000   \n",
       "50%      7350.000000      1.000000         0.0      0.000000      3.000000   \n",
       "75%      9861.500000      2.000000         0.0      0.000000      4.000000   \n",
       "max    137214.000000      3.000000         0.0      2.000000      5.000000   \n",
       "\n",
       "              grade    sqft_above  sqft_basement      yr_built  yr_renovated  \\\n",
       "count  18747.000000  18747.000000   18747.000000  18747.000000       18747.0   \n",
       "mean       7.531232   1693.682829     687.185576   1971.573798           0.0   \n",
       "std        1.023319    708.705790     195.009374     29.120990           0.0   \n",
       "min        5.000000    370.000000      10.000000   1900.000000           0.0   \n",
       "25%        7.000000   1170.000000     700.000000   1952.000000           0.0   \n",
       "50%        7.000000   1500.000000     700.000000   1975.000000           0.0   \n",
       "75%        8.000000   2100.000000     700.000000   1997.000000           0.0   \n",
       "max       11.000000   4270.000000    1470.000000   2015.000000           0.0   \n",
       "\n",
       "            zipcode           lat          long  sqft_living15    sqft_lot15  \n",
       "count  18747.000000  18747.000000  18747.000000   18747.000000  18747.000000  \n",
       "mean   98078.586387     47.560477   -122.221138    1906.591615   9033.366832  \n",
       "std       53.300019      0.140243      0.128707     596.852586   8914.549757  \n",
       "min    98001.000000     47.176400   -122.502000     460.000000    651.000000  \n",
       "25%    98033.000000     47.467700   -122.330000    1460.000000   5000.000000  \n",
       "50%    98070.000000     47.571900   -122.237000    1790.000000   7425.000000  \n",
       "75%    98118.000000     47.681100   -122.134000    2260.000000   9593.500000  \n",
       "max    98199.000000     47.777600   -121.797000    4040.000000  93825.000000  "
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x11ef4e940>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x11f12ea90>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x11f163128>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x11f185978>],\n",
       "       [<matplotlib.axes._subplots.AxesSubplot object at 0x11f051320>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x11ffe0c88>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x12000c630>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x12285ffd0>],\n",
       "       [<matplotlib.axes._subplots.AxesSubplot object at 0x12286a048>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x11f1f32e8>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x11e932c50>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x11e9605f8>],\n",
       "       [<matplotlib.axes._subplots.AxesSubplot object at 0x11e986f60>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x11e9b3908>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x11e9e02b0>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x122e14e10>],\n",
       "       [<matplotlib.axes._subplots.AxesSubplot object at 0x12502d7b8>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x11e9f6160>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x11ea1aac8>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x11edff470>]],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x1080 with 20 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.hist(bins=50, figsize=(20,15))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11f283d30>"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#test for colinearity\n",
    "sns.heatmap(abs(df.corr()), cmap = 'BuPu', linewidths=.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>price</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>bathrooms</th>\n",
       "      <th>sqft_living</th>\n",
       "      <th>sqft_lot</th>\n",
       "      <th>floors</th>\n",
       "      <th>waterfront</th>\n",
       "      <th>view</th>\n",
       "      <th>condition</th>\n",
       "      <th>grade</th>\n",
       "      <th>sqft_above</th>\n",
       "      <th>sqft_basement</th>\n",
       "      <th>yr_built</th>\n",
       "      <th>yr_renovated</th>\n",
       "      <th>zipcode</th>\n",
       "      <th>lat</th>\n",
       "      <th>long</th>\n",
       "      <th>sqft_living15</th>\n",
       "      <th>sqft_lot15</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>id</th>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>price</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bedrooms</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bathrooms</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sqft_living</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.863143</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sqft_lot</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.817463</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>floors</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>waterfront</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>view</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>condition</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>grade</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sqft_above</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.863143</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sqft_basement</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>yr_built</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>yr_renovated</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>zipcode</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>lat</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>long</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sqft_living15</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sqft_lot15</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.817463</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                id  price  bedrooms  bathrooms  sqft_living  sqft_lot  floors  \\\n",
       "id             1.0    NaN       NaN        NaN          NaN       NaN     NaN   \n",
       "price          NaN    1.0       NaN        NaN          NaN       NaN     NaN   \n",
       "bedrooms       NaN    NaN       1.0        NaN          NaN       NaN     NaN   \n",
       "bathrooms      NaN    NaN       NaN        1.0          NaN       NaN     NaN   \n",
       "sqft_living    NaN    NaN       NaN        NaN     1.000000       NaN     NaN   \n",
       "sqft_lot       NaN    NaN       NaN        NaN          NaN  1.000000     NaN   \n",
       "floors         NaN    NaN       NaN        NaN          NaN       NaN     1.0   \n",
       "waterfront     NaN    NaN       NaN        NaN          NaN       NaN     NaN   \n",
       "view           NaN    NaN       NaN        NaN          NaN       NaN     NaN   \n",
       "condition      NaN    NaN       NaN        NaN          NaN       NaN     NaN   \n",
       "grade          NaN    NaN       NaN        NaN          NaN       NaN     NaN   \n",
       "sqft_above     NaN    NaN       NaN        NaN     0.863143       NaN     NaN   \n",
       "sqft_basement  NaN    NaN       NaN        NaN          NaN       NaN     NaN   \n",
       "yr_built       NaN    NaN       NaN        NaN          NaN       NaN     NaN   \n",
       "yr_renovated   NaN    NaN       NaN        NaN          NaN       NaN     NaN   \n",
       "zipcode        NaN    NaN       NaN        NaN          NaN       NaN     NaN   \n",
       "lat            NaN    NaN       NaN        NaN          NaN       NaN     NaN   \n",
       "long           NaN    NaN       NaN        NaN          NaN       NaN     NaN   \n",
       "sqft_living15  NaN    NaN       NaN        NaN          NaN       NaN     NaN   \n",
       "sqft_lot15     NaN    NaN       NaN        NaN          NaN  0.817463     NaN   \n",
       "\n",
       "               waterfront  view  condition  grade  sqft_above  sqft_basement  \\\n",
       "id                    NaN   NaN        NaN    NaN         NaN            NaN   \n",
       "price                 NaN   NaN        NaN    NaN         NaN            NaN   \n",
       "bedrooms              NaN   NaN        NaN    NaN         NaN            NaN   \n",
       "bathrooms             NaN   NaN        NaN    NaN         NaN            NaN   \n",
       "sqft_living           NaN   NaN        NaN    NaN    0.863143            NaN   \n",
       "sqft_lot              NaN   NaN        NaN    NaN         NaN            NaN   \n",
       "floors                NaN   NaN        NaN    NaN         NaN            NaN   \n",
       "waterfront            NaN   NaN        NaN    NaN         NaN            NaN   \n",
       "view                  NaN   1.0        NaN    NaN         NaN            NaN   \n",
       "condition             NaN   NaN        1.0    NaN         NaN            NaN   \n",
       "grade                 NaN   NaN        NaN    1.0         NaN            NaN   \n",
       "sqft_above            NaN   NaN        NaN    NaN    1.000000            NaN   \n",
       "sqft_basement         NaN   NaN        NaN    NaN         NaN            1.0   \n",
       "yr_built              NaN   NaN        NaN    NaN         NaN            NaN   \n",
       "yr_renovated          NaN   NaN        NaN    NaN         NaN            NaN   \n",
       "zipcode               NaN   NaN        NaN    NaN         NaN            NaN   \n",
       "lat                   NaN   NaN        NaN    NaN         NaN            NaN   \n",
       "long                  NaN   NaN        NaN    NaN         NaN            NaN   \n",
       "sqft_living15         NaN   NaN        NaN    NaN         NaN            NaN   \n",
       "sqft_lot15            NaN   NaN        NaN    NaN         NaN            NaN   \n",
       "\n",
       "               yr_built  yr_renovated  zipcode  lat  long  sqft_living15  \\\n",
       "id                  NaN           NaN      NaN  NaN   NaN            NaN   \n",
       "price               NaN           NaN      NaN  NaN   NaN            NaN   \n",
       "bedrooms            NaN           NaN      NaN  NaN   NaN            NaN   \n",
       "bathrooms           NaN           NaN      NaN  NaN   NaN            NaN   \n",
       "sqft_living         NaN           NaN      NaN  NaN   NaN            NaN   \n",
       "sqft_lot            NaN           NaN      NaN  NaN   NaN            NaN   \n",
       "floors              NaN           NaN      NaN  NaN   NaN            NaN   \n",
       "waterfront          NaN           NaN      NaN  NaN   NaN            NaN   \n",
       "view                NaN           NaN      NaN  NaN   NaN            NaN   \n",
       "condition           NaN           NaN      NaN  NaN   NaN            NaN   \n",
       "grade               NaN           NaN      NaN  NaN   NaN            NaN   \n",
       "sqft_above          NaN           NaN      NaN  NaN   NaN            NaN   \n",
       "sqft_basement       NaN           NaN      NaN  NaN   NaN            NaN   \n",
       "yr_built            1.0           NaN      NaN  NaN   NaN            NaN   \n",
       "yr_renovated        NaN           NaN      NaN  NaN   NaN            NaN   \n",
       "zipcode             NaN           NaN      1.0  NaN   NaN            NaN   \n",
       "lat                 NaN           NaN      NaN  1.0   NaN            NaN   \n",
       "long                NaN           NaN      NaN  NaN   1.0            NaN   \n",
       "sqft_living15       NaN           NaN      NaN  NaN   NaN            1.0   \n",
       "sqft_lot15          NaN           NaN      NaN  NaN   NaN            NaN   \n",
       "\n",
       "               sqft_lot15  \n",
       "id                    NaN  \n",
       "price                 NaN  \n",
       "bedrooms              NaN  \n",
       "bathrooms             NaN  \n",
       "sqft_living           NaN  \n",
       "sqft_lot         0.817463  \n",
       "floors                NaN  \n",
       "waterfront            NaN  \n",
       "view                  NaN  \n",
       "condition             NaN  \n",
       "grade                 NaN  \n",
       "sqft_above            NaN  \n",
       "sqft_basement         NaN  \n",
       "yr_built              NaN  \n",
       "yr_renovated          NaN  \n",
       "zipcode               NaN  \n",
       "lat                   NaN  \n",
       "long                  NaN  \n",
       "sqft_living15         NaN  \n",
       "sqft_lot15       1.000000  "
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.corr()[abs(df.corr()>.75)]\n",
    "#hight correlated values sqlt_above and sqlt_living not good for our model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id               0\n",
       "date             0\n",
       "price            0\n",
       "bedrooms         0\n",
       "bathrooms        0\n",
       "sqft_living      0\n",
       "sqft_lot         0\n",
       "floors           0\n",
       "waterfront       0\n",
       "view             0\n",
       "condition        0\n",
       "grade            0\n",
       "sqft_above       0\n",
       "sqft_basement    0\n",
       "yr_built         0\n",
       "yr_renovated     0\n",
       "zipcode          0\n",
       "lat              0\n",
       "long             0\n",
       "sqft_living15    0\n",
       "sqft_lot15       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [],
   "source": [
    "# def normalized(dataframe , col):\n",
    "#     df_copy = df.copy()\n",
    "#     for i in col:\n",
    "#         df_copy[col] = np.log(df_copy[col])\n",
    "#     return df_copy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [],
   "source": [
    "#         if i == ['price', 'sqft_above', 'sqft_living', 'sqft_living15', 'sqft_lot', 'sqft_lot15']:\n",
    "# df = normalized(df,['price', 'sqft_above', 'sqft_living', 'sqft_living15', 'sqft_lot', 'sqft_lot15'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "# df.price.hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['price'] = np.log(df.price)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['sqft_above'] = np.log(df.sqft_above)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['sqft_living'] = np.log(df.sqft_living)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['sqft_living15'] = np.log(df.sqft_living15)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['sqft_lot'] = np.log(df.sqft_lot)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['sqft_lot15'] = np.log(df.sqft_lot15)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [],
   "source": [
    "# df.hist(bins=50, figsize=(20,15))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living',\n",
       "       'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade',\n",
       "       'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode',\n",
       "       'lat', 'long', 'sqft_living15', 'sqft_lot15'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 18747 entries, 0 to 21596\n",
      "Data columns (total 21 columns):\n",
      "id               18747 non-null int64\n",
      "date             18747 non-null object\n",
      "price            18747 non-null float64\n",
      "bedrooms         18747 non-null int64\n",
      "bathrooms        18747 non-null float64\n",
      "sqft_living      18747 non-null float64\n",
      "sqft_lot         18747 non-null float64\n",
      "floors           18747 non-null float64\n",
      "waterfront       18747 non-null float64\n",
      "view             18747 non-null float64\n",
      "condition        18747 non-null int64\n",
      "grade            18747 non-null int64\n",
      "sqft_above       18747 non-null float64\n",
      "sqft_basement    18747 non-null float64\n",
      "yr_built         18747 non-null int64\n",
      "yr_renovated     18747 non-null float64\n",
      "zipcode          18747 non-null int64\n",
      "lat              18747 non-null float64\n",
      "long             18747 non-null float64\n",
      "sqft_living15    18747 non-null float64\n",
      "sqft_lot15       18747 non-null float64\n",
      "dtypes: float64(14), int64(6), object(1)\n",
      "memory usage: 3.1+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_selection import RFE\n",
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "list_of_c = ['sqft_above', 'sqft_living', 'sqft_living15', 'sqft_lot', \n",
    "                 'sqft_lot15', 'bedrooms', 'bathrooms', 'floors', 'waterfront', \n",
    "                 'condition', 'grade', 'yr_built', 'zipcode', \n",
    "                 'view',  'long']\n",
    "predictors = predictors = df.reindex(columns=list_of_c)\n",
    "linreg = LinearRegression()\n",
    "selector = RFE(linreg, n_features_to_select = 5)\n",
    "selector = selector.fit(predictors, df[\"price\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [],
   "source": [
    "s = selector.support_ \n",
    "r = selector.ranking_\n",
    "\n",
    "  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 1,  1,  1,  8,  3,  6,  5,  7, 11,  2,  1,  9, 10,  4,  1])"
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sqft_above 1\n",
      "sqft_living 1\n",
      "sqft_living15 1\n",
      "sqft_lot 8\n",
      "sqft_lot15 3\n",
      "bedrooms 6\n",
      "bathrooms 5\n",
      "floors 7\n",
      "waterfront 11\n",
      "condition 2\n",
      "grade 1\n",
      "yr_built 9\n",
      "zipcode 10\n",
      "view 4\n",
      "long 1\n"
     ]
    }
   ],
   "source": [
    "for i , u in zip(list_of_c , r):\n",
    "    print(i , u)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['yr_built - 8', 'yr_built - 8', 'yr_built - 8', 'yr_built - 8', 'yr_built - 8', 'yr_built - 8', 'yr_built - 8', 'yr_built - 8', 'yr_built - 8', 'yr_built - 8', 'yr_built - 8', 'yr_built - 8', 'yr_built - 8', 'yr_built - 8', 'yr_built - 8']\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [],
   "source": [
    "import statsmodels.api as sm\n",
    "from statsmodels.formula.api import ols\n",
    "formula = \"price ~ long + grade+ sqft_living + view + condition + bathrooms \"\n",
    "model = ols(formula= formula, data=df).fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>          <td>price</td>      <th>  R-squared:         </th> <td>   0.487</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.487</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   2965.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Sun, 23 Jun 2019</td> <th>  Prob (F-statistic):</th>  <td>  0.00</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>13:21:10</td>     <th>  Log-Likelihood:    </th> <td> -5786.4</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td> 18747</td>      <th>  AIC:               </th> <td>1.159e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td> 18740</td>      <th>  BIC:               </th> <td>1.164e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     6</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "       <td></td>          <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>   <td>  -37.0045</td> <td>    2.456</td> <td>  -15.068</td> <td> 0.000</td> <td>  -41.818</td> <td>  -32.191</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>long</th>        <td>   -0.3697</td> <td>    0.020</td> <td>  -18.495</td> <td> 0.000</td> <td>   -0.409</td> <td>   -0.330</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>grade</th>       <td>    0.2036</td> <td>    0.003</td> <td>   59.807</td> <td> 0.000</td> <td>    0.197</td> <td>    0.210</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>sqft_living</th> <td>    0.3962</td> <td>    0.010</td> <td>   38.069</td> <td> 0.000</td> <td>    0.376</td> <td>    0.417</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>view</th>        <td>    0.0875</td> <td>    0.006</td> <td>   14.309</td> <td> 0.000</td> <td>    0.076</td> <td>    0.100</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>condition</th>   <td>    0.0912</td> <td>    0.004</td> <td>   23.785</td> <td> 0.000</td> <td>    0.084</td> <td>    0.099</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>bathrooms</th>   <td>   -0.0113</td> <td>    0.005</td> <td>   -2.136</td> <td> 0.033</td> <td>   -0.022</td> <td>   -0.001</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>36.894</td> <th>  Durbin-Watson:     </th> <td>   1.977</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td>  35.459</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.086</td> <th>  Prob(JB):          </th> <td>2.00e-08</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 2.875</td> <th>  Cond. No.          </th> <td>1.25e+05</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 1.25e+05. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                  price   R-squared:                       0.487\n",
       "Model:                            OLS   Adj. R-squared:                  0.487\n",
       "Method:                 Least Squares   F-statistic:                     2965.\n",
       "Date:                Sun, 23 Jun 2019   Prob (F-statistic):               0.00\n",
       "Time:                        13:21:10   Log-Likelihood:                -5786.4\n",
       "No. Observations:               18747   AIC:                         1.159e+04\n",
       "Df Residuals:                   18740   BIC:                         1.164e+04\n",
       "Df Model:                           6                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "===============================================================================\n",
       "                  coef    std err          t      P>|t|      [0.025      0.975]\n",
       "-------------------------------------------------------------------------------\n",
       "Intercept     -37.0045      2.456    -15.068      0.000     -41.818     -32.191\n",
       "long           -0.3697      0.020    -18.495      0.000      -0.409      -0.330\n",
       "grade           0.2036      0.003     59.807      0.000       0.197       0.210\n",
       "sqft_living     0.3962      0.010     38.069      0.000       0.376       0.417\n",
       "view            0.0875      0.006     14.309      0.000       0.076       0.100\n",
       "condition       0.0912      0.004     23.785      0.000       0.084       0.099\n",
       "bathrooms      -0.0113      0.005     -2.136      0.033      -0.022      -0.001\n",
       "==============================================================================\n",
       "Omnibus:                       36.894   Durbin-Watson:                   1.977\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               35.459\n",
       "Skew:                          -0.086   Prob(JB):                     2.00e-08\n",
       "Kurtosis:                       2.875   Cond. No.                     1.25e+05\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 1.25e+05. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 179,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [],
   "source": [
    "import statsmodels.api as sm\n",
    "from statsmodels.formula.api import ols\n",
    "formula = \"price~  waterfront + grade + condition + sqft_living15 + view + yr_built + zipcode \"\n",
    "model = ols(formula= formula, data=df).fit()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>          <td>price</td>      <th>  R-squared:         </th> <td>   0.517</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.517</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   3347.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Sun, 23 Jun 2019</td> <th>  Prob (F-statistic):</th>  <td>  0.00</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>13:28:38</td>     <th>  Log-Likelihood:    </th> <td> -5215.8</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td> 18747</td>      <th>  AIC:               </th> <td>1.045e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td> 18740</td>      <th>  BIC:               </th> <td>1.050e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     6</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "        <td></td>           <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>     <td>  -57.6797</td> <td>    4.878</td> <td>  -11.825</td> <td> 0.000</td> <td>  -67.240</td> <td>  -48.119</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>waterfront</th>    <td>  4.27e-10</td> <td> 3.61e-11</td> <td>   11.825</td> <td> 0.000</td> <td> 3.56e-10</td> <td> 4.98e-10</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>grade</th>         <td>    0.2740</td> <td>    0.003</td> <td>   83.663</td> <td> 0.000</td> <td>    0.268</td> <td>    0.280</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>condition</th>     <td>    0.0575</td> <td>    0.004</td> <td>   14.469</td> <td> 0.000</td> <td>    0.050</td> <td>    0.065</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>sqft_living15</th> <td>    0.3998</td> <td>    0.011</td> <td>   38.000</td> <td> 0.000</td> <td>    0.379</td> <td>    0.420</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>view</th>          <td>    0.0524</td> <td>    0.006</td> <td>    8.738</td> <td> 0.000</td> <td>    0.041</td> <td>    0.064</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>yr_built</th>      <td>   -0.0040</td> <td>    0.000</td> <td>  -37.770</td> <td> 0.000</td> <td>   -0.004</td> <td>   -0.004</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>zipcode</th>       <td>    0.0007</td> <td> 4.89e-05</td> <td>   15.270</td> <td> 0.000</td> <td>    0.001</td> <td>    0.001</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>76.669</td> <th>  Durbin-Watson:     </th> <td>   1.962</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td>  78.246</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.147</td> <th>  Prob(JB):          </th> <td>1.02e-17</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 3.115</td> <th>  Cond. No.          </th> <td>4.12e+21</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The smallest eigenvalue is 1.06e-29. This might indicate that there are<br/>strong multicollinearity problems or that the design matrix is singular."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                  price   R-squared:                       0.517\n",
       "Model:                            OLS   Adj. R-squared:                  0.517\n",
       "Method:                 Least Squares   F-statistic:                     3347.\n",
       "Date:                Sun, 23 Jun 2019   Prob (F-statistic):               0.00\n",
       "Time:                        13:28:38   Log-Likelihood:                -5215.8\n",
       "No. Observations:               18747   AIC:                         1.045e+04\n",
       "Df Residuals:                   18740   BIC:                         1.050e+04\n",
       "Df Model:                           6                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "=================================================================================\n",
       "                    coef    std err          t      P>|t|      [0.025      0.975]\n",
       "---------------------------------------------------------------------------------\n",
       "Intercept       -57.6797      4.878    -11.825      0.000     -67.240     -48.119\n",
       "waterfront      4.27e-10   3.61e-11     11.825      0.000    3.56e-10    4.98e-10\n",
       "grade             0.2740      0.003     83.663      0.000       0.268       0.280\n",
       "condition         0.0575      0.004     14.469      0.000       0.050       0.065\n",
       "sqft_living15     0.3998      0.011     38.000      0.000       0.379       0.420\n",
       "view              0.0524      0.006      8.738      0.000       0.041       0.064\n",
       "yr_built         -0.0040      0.000    -37.770      0.000      -0.004      -0.004\n",
       "zipcode           0.0007   4.89e-05     15.270      0.000       0.001       0.001\n",
       "==============================================================================\n",
       "Omnibus:                       76.669   Durbin-Watson:                   1.962\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               78.246\n",
       "Skew:                          -0.147   Prob(JB):                     1.02e-17\n",
       "Kurtosis:                       3.115   Cond. No.                     4.12e+21\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The smallest eigenvalue is 1.06e-29. This might indicate that there are\n",
       "strong multicollinearity problems or that the design matrix is singular.\n",
       "\"\"\""
      ]
     },
     "execution_count": 185,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11fb68fd0>"
      ]
     },
     "execution_count": 183,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
